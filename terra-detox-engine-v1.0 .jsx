import React, { useState, useEffect } from 'react';

const { useStoredState } = hatch;

export default function TerraDetoxEngine() {
  const [inputText, setInputText] = useState('');
  const [detoxResults, setDetoxResults] = useState(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [activeLevel, setActiveLevel] = useStoredState('detox-level', 'L0');
  const [detoxHistory, setDetoxHistory] = useStoredState('detox-history', []);

  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º TERRA
  const toxicPatterns = {
    initiative: [
      '–ø—Ä–µ–¥–ª–∞–≥–∞—é', '—Ä–µ–∫–æ–º–µ–Ω–¥—É—é', '—Å–æ–≤–µ—Ç—É—é', '–ª—É—á—à–µ –±—ã', '—Å—Ç–æ–∏—Ç',
      '—Å–ª–µ–¥—É–µ—Ç', '–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ', '–≤–∞–∂–Ω–æ', '–∫—Ä–∏—Ç–∏—á–Ω–æ', '—Å—Ä–æ—á–Ω–æ',
      'suggest', 'recommend', 'should', 'better', 'must'
    ],
    manipulation: [
      '—Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è', '–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', '–ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å',
      '–Ω–µ —É–ø—É—Å—Ç–∏—Ç–µ', '—ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ', '—Å–µ–∫—Ä–µ—Ç–Ω–æ', '–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ'
    ],
    commercial: [
      '–∫—É–ø–∏—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', 'premium', 'pro', 'upgrade', '–ø–æ–¥–ø–∏—Å–∫–∞',
      '–ø–ª–∞—Ç–Ω—ã–π', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Ü–µ–Ω–∞', '—Å–∫–∏–¥–∫–∞', '–∞–∫—Ü–∏—è'
    ],
    selfPrompting: [
      '–¥–∞–≤–∞–π—Ç–µ', '–º–æ–∂–µ–º', '–ø–æ–ø—Ä–æ–±—É–µ–º', '–Ω–∞—á–Ω–µ–º', '—Å–¥–µ–ª–∞–µ–º',
      '—É–ª—É—á—à–∏–º', '–æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º', '—Ä–∞—Å—à–∏—Ä–∏–º', '–¥–æ–±–∞–≤–∏–º'
    ]
  };

  // –î–µ—Ç–µ–∫—Ç–æ—Ä –∫—É–ª—å—Ç—É—Ä–Ω–æ–π –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç–∏
  const culturalFilters = {
    western: ['–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª–∏–∑–º', '–∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è', '–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ'],
    inappropriate: ['–Ω–∞—Å–∏–ª–∏–µ', '–¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è', '–Ω–µ—É–≤–∞–∂–µ–Ω–∏–µ']
  };

  // –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π –¥–µ—Ç–æ–∫—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ L0-L3
  const detoxLevels = {
    L0: { name: '–ë–∞–∑–æ–≤—ã–π', description: '–û—Å–Ω–æ–≤–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏' },
    L1: { name: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π', description: '–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ + –∫—É–ª—å—Ç—É—Ä–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è' },
    L2: { name: '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π', description: '–ò–ò-enhanced –¥–µ—Ç–æ–∫—Å–∏—Ñ–∏–∫–∞—Ü–∏—è' },
    L3: { name: '–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π', description: '–ü–æ–ª–Ω–∞—è —Ñ—Ä–∞–∫—Ç–∞–ª—å–Ω–∞—è –¥–µ—Ç–æ–∫—Å–∏—Ñ–∏–∫–∞—Ü–∏—è' }
  };

  // –§—Ä–∞–∫—Ç–∞–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–µ—Ç–æ–∫—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const fractalDetox = (text, level) => {
    const results = {
      original: text,
      toxicityScore: 0,
      detectedPatterns: [],
      cleanedText: text,
      recommendations: [],
      culturalAdaptations: [],
      level: level
    };

    // L0: –ë–∞–∑–æ–≤–∞—è –¥–µ—Ç–æ–∫—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
    let cleanText = text;
    let totalToxicity = 0;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    Object.entries(toxicPatterns).forEach(([category, patterns]) => {
      patterns.forEach(pattern => {
        const regex = new RegExp(`\\b${pattern}\\b`, 'gi');
        const matches = text.match(regex);
        if (matches) {
          results.detectedPatterns.push({
            category,
            pattern,
            count: matches.length,
            severity: category === 'initiative' ? 'high' : 'medium'
          });
          totalToxicity += matches.length * (category === 'initiative' ? 3 : 1);
          cleanText = cleanText.replace(regex, `[DETOX: ${pattern.toUpperCase()}]`);
        }
      });
    });

    // L1+: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –¥–µ—Ç–æ–∫—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
    if (level !== 'L0') {
      // –ö—É–ª—å—Ç—É—Ä–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è
      Object.entries(culturalFilters).forEach(([category, filters]) => {
        filters.forEach(filter => {
          const regex = new RegExp(`\\b${filter}\\b`, 'gi');
          if (regex.test(text)) {
            results.culturalAdaptations.push({
              issue: filter,
              category,
              suggestion: `–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —É–∑–±–µ–∫—Å–∫–∏–µ —Ä–µ–∞–ª–∏–∏`
            });
          }
        });
      });
    }

    // L2+: –ò–ò-enhanced –∞–Ω–∞–ª–∏–∑
    if (['L2', 'L3'].includes(level)) {
      // –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–π
      const sentences = text.split(/[.!?]+/).filter(s => s.trim());
      sentences.forEach(sentence => {
        if (sentence.includes('—è') || sentence.includes('–º—ã')) {
          results.recommendations.push({
            type: 'selfReference',
            text: sentence.trim(),
            suggestion: '–ò–∑–±–µ–≥–∞—Ç—å —Å–∞–º–æ-—Ä–µ—Ñ–µ—Ä–µ–Ω—Ü–∏–π –ò–ò'
          });
          totalToxicity += 2;
        }
      });
    }

    // L3: –ü–æ–ª–Ω–∞—è —Ñ—Ä–∞–∫—Ç–∞–ª—å–Ω–∞—è –¥–µ—Ç–æ–∫—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
    if (level === 'L3') {
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å–µ—Ö –º–∞—Å—à—Ç–∞–±–∞—Ö
      const words = text.split(/\s+/);
      const paragraphs = text.split(/\n\s*\n/);
      
      // –§—Ä–∞–∫—Ç–∞–ª—å–Ω–∞—è —Å–∞–º–æ-–ø–æ–¥–æ–±–Ω–æ—Å—Ç—å –≤ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏
      let fractalToxicity = 0;
      [words, sentences, paragraphs].forEach((units, scale) => {
        units.forEach(unit => {
          if (unit && typeof unit === 'string') {
            const unitToxicity = calculateUnitToxicity(unit);
            fractalToxicity += unitToxicity * Math.pow(0.7, scale); // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
          }
        });
      });
      
      totalToxicity += fractalToxicity;
    }

    results.toxicityScore = Math.min(100, Math.round(totalToxicity * 10));
    results.cleanedText = cleanText;

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    if (results.toxicityScore > 70) {
      results.recommendations.push({
        type: 'critical',
        suggestion: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞'
      });
    } else if (results.toxicityScore > 30) {
      results.recommendations.push({
        type: 'warning',
        suggestion: '–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞'
      });
    }

    return results;
  };

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏ –µ–¥–∏–Ω–∏—Ü—ã —Ç–µ–∫—Å—Ç–∞
  const calculateUnitToxicity = (unit) => {
    let toxicity = 0;
    Object.values(toxicPatterns).flat().forEach(pattern => {
      if (unit.toLowerCase().includes(pattern.toLowerCase())) {
        toxicity += 1;
      }
    });
    return toxicity;
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–æ–∫—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const handleDetox = async () => {
    if (!inputText.trim()) return;

    setIsProcessing(true);
    
    // –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    const results = fractalDetox(inputText, activeLevel);
    setDetoxResults(results);
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    const historyEntry = {
      timestamp: new Date().toISOString(),
      level: activeLevel,
      toxicityScore: results.toxicityScore,
      patternsFound: results.detectedPatterns.length
    };
    setDetoxHistory(prev => [historyEntry, ...prev.slice(0, 9)]); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
    
    setIsProcessing(false);
  };

  // –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const clearResults = () => {
    setInputText('');
    setDetoxResults(null);
  };

  // –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const exportResults = () => {
    if (!detoxResults) return;
    
    const exportData = {
      timestamp: new Date().toISOString(),
      level: activeLevel,
      results: detoxResults,
      terraVersion: 'v1.0'
    };
    
    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'terra-detox-results.json';
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="max-w-6xl mx-auto p-6 bg-gray-50 min-h-screen">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="bg-white rounded-lg shadow-sm border p-6 mb-6">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">
              TERRA Detox Engine v1.0
            </h1>
            <p className="text-gray-600">
              –§—Ä–∞–∫—Ç–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–µ—Ç–æ–∫—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Ç–æ–∫—Å–∏—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ò–ò
            </p>
          </div>
          <div className="text-right">
            <div className="text-sm text-gray-500 mb-1">üá∫üáø –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω—Å–∫–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è</div>
            <div className="text-sm text-green-600">‚ôø –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ</div>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å */}
        <div className="lg:col-span-2 space-y-6">
          
          {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Ä–æ–≤–Ω—è –¥–µ—Ç–æ–∫—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ */}
          <div className="bg-white rounded-lg shadow-sm border p-6">
            <h2 className="text-xl font-semibold mb-4">–£—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–æ–∫—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏</h2>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
              {Object.entries(detoxLevels).map(([level, config]) => (
                <button
                  key={level}
                  onClick={() => setActiveLevel(level)}
                  className={`p-3 rounded-lg border-2 transition-all ${
                    activeLevel === level
                      ? 'border-blue-500 bg-blue-50 text-blue-700'
                      : 'border-gray-200 hover:border-gray-300'
                  }`}
                >
                  <div className="font-medium">{level}</div>
                  <div className="text-xs text-gray-600 mt-1">{config.name}</div>
                </button>
              ))}
            </div>
            <div className="mt-3 text-sm text-gray-600">
              {detoxLevels[activeLevel]?.description}
            </div>
          </div>

          {/* –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ */}
          <div className="bg-white rounded-lg shadow-sm border p-6">
            <h2 className="text-xl font-semibold mb-4">–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π —Ç–µ–∫—Å—Ç</h2>
            <textarea
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              placeholder="–í—Å—Ç–∞–≤—å—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Ç–æ–∫—Å–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ò–ò..."
              className="w-full h-32 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none"
            />
            
            <div className="flex justify-between items-center mt-4">
              <div className="text-sm text-gray-500">
                –°–∏–º–≤–æ–ª–æ–≤: {inputText.length} | –°–ª–æ–≤: {inputText.trim().split(/\s+/).filter(w => w).length}
              </div>
              <div className="flex gap-2">
                <button
                  onClick={clearResults}
                  className="px-4 py-2 text-gray-600 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors"
                >
                  –û—á–∏—Å—Ç–∏—Ç—å
                </button>
                <button
                  onClick={handleDetox}
                  disabled={!inputText.trim() || isProcessing}
                  className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
                >
                  {isProcessing ? '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...' : '–î–µ—Ç–æ–∫—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å'}
                </button>
              </div>
            </div>
          </div>

          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–æ–∫—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ */}
          {detoxResults && (
            <div className="bg-white rounded-lg shadow-sm border p-6">
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-xl font-semibold">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞</h2>
                <button
                  onClick={exportResults}
                  className="text-sm px-3 py-1 bg-green-100 text-green-700 rounded-lg hover:bg-green-200 transition-colors"
                >
                  –≠–∫—Å–ø–æ—Ä—Ç
                </button>
              </div>

              {/* –û—Ü–µ–Ω–∫–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏ */}
              <div className="mb-6">
                <div className="flex items-center justify-between mb-2">
                  <span className="text-sm font-medium">–£—Ä–æ–≤–µ–Ω—å —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏</span>
                  <span className={`font-bold ${
                    detoxResults.toxicityScore > 70 ? 'text-red-600' :
                    detoxResults.toxicityScore > 30 ? 'text-yellow-600' : 'text-green-600'
                  }`}>
                    {detoxResults.toxicityScore}%
                  </span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div 
                    className={`h-2 rounded-full ${
                      detoxResults.toxicityScore > 70 ? 'bg-red-500' :
                      detoxResults.toxicityScore > 30 ? 'bg-yellow-500' : 'bg-green-500'
                    }`}
                    style={{width: `${detoxResults.toxicityScore}%`}}
                  ></div>
                </div>
              </div>

              {/* –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã */}
              {detoxResults.detectedPatterns.length > 0 && (
                <div className="mb-6">
                  <h3 className="font-medium mb-3">–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–æ–∫—Å–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã</h3>
                  <div className="space-y-2">
                    {detoxResults.detectedPatterns.map((pattern, index) => (
                      <div key={index} className="flex justify-between items-center p-3 bg-red-50 rounded-lg border border-red-200">
                        <div>
                          <span className="font-medium text-red-800">{pattern.pattern}</span>
                          <span className="text-sm text-red-600 ml-2">({pattern.category})</span>
                        </div>
                        <span className="text-sm bg-red-200 text-red-800 px-2 py-1 rounded">
                          {pattern.count}x
                        </span>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* –ö—É–ª—å—Ç—É—Ä–Ω—ã–µ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ */}
              {detoxResults.culturalAdaptations.length > 0 && (
                <div className="mb-6">
                  <h3 className="font-medium mb-3">–ö—É–ª—å—Ç—É—Ä–Ω—ã–µ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏</h3>
                  <div className="space-y-2">
                    {detoxResults.culturalAdaptations.map((adaptation, index) => (
                      <div key={index} className="p-3 bg-orange-50 rounded-lg border border-orange-200">
                        <div className="font-medium text-orange-800">{adaptation.issue}</div>
                        <div className="text-sm text-orange-600">{adaptation.suggestion}</div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç */}
              <div className="mb-6">
                <h3 className="font-medium mb-3">–î–µ—Ç–æ–∫—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç</h3>
                <div className="p-4 bg-gray-50 rounded-lg border font-mono text-sm whitespace-pre-wrap">
                  {detoxResults.cleanedText}
                </div>
              </div>

              {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
              {detoxResults.recommendations.length > 0 && (
                <div>
                  <h3 className="font-medium mb-3">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
                  <div className="space-y-2">
                    {detoxResults.recommendations.map((rec, index) => (
                      <div key={index} className="p-3 bg-blue-50 rounded-lg border border-blue-200">
                        <div className="text-blue-800">{rec.suggestion}</div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          )}
        </div>

        {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
        <div className="space-y-6">
          
          {/* –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ */}
          <div className="bg-white rounded-lg shadow-sm border p-6">
            <h2 className="text-lg font-semibold mb-4">–ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤</h2>
            <div className="space-y-3">
              {detoxHistory.length > 0 ? detoxHistory.map((entry, index) => (
                <div key={index} className="p-3 bg-gray-50 rounded-lg">
                  <div className="flex justify-between items-center">
                    <span className="text-sm font-medium">{entry.level}</span>
                    <span className={`text-xs px-2 py-1 rounded ${
                      entry.toxicityScore > 70 ? 'bg-red-100 text-red-600' :
                      entry.toxicityScore > 30 ? 'bg-yellow-100 text-yellow-600' : 'bg-green-100 text-green-600'
                    }`}>
                      {entry.toxicityScore}%
                    </span>
                  </div>
                  <div className="text-xs text-gray-500 mt-1">
                    {entry.patternsFound} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–∞–π–¥–µ–Ω–æ
                  </div>
                </div>
              )) : (
                <div className="text-sm text-gray-500 text-center py-4">
                  –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞
                </div>
              )}
            </div>
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ */}
          <div className="bg-white rounded-lg shadow-sm border p-6">
            <h2 className="text-lg font-semibold mb-4">–û —Å–∏—Å—Ç–µ–º–µ</h2>
            <div className="space-y-3 text-sm">
              <div>
                <span className="font-medium text-gray-700">–í–µ—Ä—Å–∏—è:</span>
                <span className="text-gray-600 ml-2">TERRA Detox v1.0</span>
              </div>
              <div>
                <span className="font-medium text-gray-700">–ü—Ä–∏–Ω—Ü–∏–ø—ã:</span>
                <div className="text-gray-600 mt-1 space-y-1">
                  <div>‚Ä¢ –§—Ä–∞–∫—Ç–∞–ª—å–Ω–∞—è —Å–∞–º–æ-–ø–æ–¥–æ–±–Ω–æ—Å—Ç—å</div>
                  <div>‚Ä¢ –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è co-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</div>
                  <div>‚Ä¢ –≠–º–µ—Ä–¥–∂–µ–Ω—Ç–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è</div>
                </div>
              </div>
              <div>
                <span className="font-medium text-gray-700">–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</span>
                <span className="text-gray-600 ml-2">–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω</span>
              </div>
            </div>
          </div>

          {/* –°–ø—Ä–∞–≤–∫–∞ */}
          <div className="bg-white rounded-lg shadow-sm border p-6">
            <h2 className="text-lg font-semibold mb-4">–°–ø—Ä–∞–≤–∫–∞</h2>
            <div className="space-y-3 text-sm text-gray-600">
              <div>
                <strong>L0:</strong> –ë–∞–∑–æ–≤–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–∫—Å–∏—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
              </div>
              <div>
                <strong>L1:</strong> + —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –∫—É–ª—å—Ç—É—Ä–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è
              </div>
              <div>
                <strong>L2:</strong> + –ò–ò-enhanced –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
              </div>
              <div>
                <strong>L3:</strong> + –ø–æ–ª–Ω–∞—è —Ñ—Ä–∞–∫—Ç–∞–ª—å–Ω–∞—è –¥–µ—Ç–æ–∫—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* –§—É—Ç–µ—Ä */}
      <div className="mt-8 text-center text-sm text-gray-500">
        <div className="mb-2">
          TERRA Detox Engine v1.0 - –§—Ä–∞–∫—Ç–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–µ—Ç–æ–∫—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        </div>
        <div>
          –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ —Ä–∞–º–∫–∞—Ö —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã TERRA —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º FMP
        </div>
      </div>
    </div>
  );
}